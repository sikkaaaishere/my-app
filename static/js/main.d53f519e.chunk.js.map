{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","navigator","clipboard","writeText","split","join","length","ProtoTypes","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0OAIe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACGH,EAAMI,QAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAqBJ,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAN,gBAA/C,UACR,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BAChG,uBAAOL,UAAU,mBAAoBS,QAAQ,yBAA7C,yCC7Ca,SAASC,EAASX,GAC/B,IAmCA,EAAwBY,mBAAS,mBAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,qCACE,sBAAKb,UAAU,YAAYc,MAAO,CAACC,MAAoB,SAAbhB,EAAME,KAAc,QAAQ,SAAtE,UACE,6BAAKF,EAAMiB,UACX,qBAAKhB,UAAU,OAAf,SACE,0BACEA,UAAU,eACVK,GAAG,QACHY,KAAK,IACLC,MAAON,EACPO,SA9Ba,SAACC,GAEtBP,EAAQO,EAAMC,OAAOH,QA6BbJ,MAAO,CAACQ,gBAA8B,SAAbvB,EAAME,KAAc,QAAQ,QAASc,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,aAGpG,wBAAQD,UAAU,uBAAuBM,QAnDzB,WACpB,IAAIiB,EAAUX,EAAKY,cACnBX,EAAQU,GACRxB,EAAM0B,UAAU,0BAA2B,YAgDvC,kCAGA,wBAAQzB,UAAU,uBAAuBM,QAhDzB,WACpB,IAAIiB,EAAUX,EAAKc,cACnBb,EAAQU,GACRxB,EAAM0B,UAAU,0BAA2B,YA6CvC,kCAGA,wBAAQzB,UAAU,uBAAuBM,QA7CtB,WAEvBO,EADc,KA4CV,mBAGA,wBAAQb,UAAU,uBAAuBM,QArC5B,WACjBqB,QAAQC,IAAI,aACZ,IAAIhB,EAAOiB,SAASC,eAAe,SACnClB,EAAKmB,SACLC,UAAUC,UAAUC,UAAUtB,EAAKM,QAiC/B,uBAGA,wBAAQlB,UAAU,uBAAuBM,QAjCvB,WACtB,IAAIiB,EAASX,EAAKuB,MAAM,QACxBtB,EAAQU,EAAQa,KAAK,OA+BjB,oCAIF,sBAAKpC,UAAU,iBAAiBc,MAAO,CAACC,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,SAA1E,UACE,mDACA,8BACGW,EAAKuB,MAAM,KAAKE,OAAS,EAD5B,cAC0CzB,EAAKyB,OAD/C,iBAGA,8BAAI,KAAQzB,EAAKuB,MAAM,KAAKE,OAA5B,sBACA,yCACA,4BAAIzB,EAAKyB,OAAO,EAAEzB,EAAK,qCDpB/Bd,EAAOwC,WAAa,CACpBnC,MAAOoC,IAAUC,OAAOC,WACxBC,UAAWH,IAAUC,OAAOC,YAE5B3C,EAAO6C,aAAa,CACpBxC,MAAO,iBACPuC,UAAW,mBElDIE,MAZf,SAAe7C,GAKX,OACIA,EAAM8C,OAAS,sBAAK7C,UAAS,sBAAiBD,EAAM8C,MAAMzC,KAA7B,gCAAiEI,KAAK,QAApF,UACjB,iCANe,SAACsC,GACd,IAAMC,EAAOD,EAAKpB,cAClB,OAAOqB,EAAMC,OAAO,GAAGxB,cAAgBuB,EAAME,MAAM,GAI5CC,CAAWnD,EAAM8C,MAAMzC,QADf,IACgCL,EAAM8C,MAAMM,QCoDpDC,MArDf,WACE,MAAwBzC,mBAAS,SAAjC,mBAAOV,EAAP,KAAaoD,EAAb,KACA,EAA0B1C,mBAAS,MAAnC,mBAAOkC,EAAP,KAAcS,EAAd,KAEM7B,EAAY,SAAC8B,EAASnD,GAC1BkD,EAAS,CACPH,IAAKI,EACLnD,KAAMA,IAERoD,YAAW,WACTF,EAAS,QACR,OAeL,OACE,qCAIE,cAACxD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAlBvB,WACJ,UAATN,GACFoD,EAAQ,QACRxB,SAAS4B,KAAK3C,MAAMQ,gBAAkB,QACtCG,EAAU,6BAA8B,WACxCI,SAAS1B,MAAQ,0BAEjBkD,EAAQ,SACRxB,SAAS4B,KAAK3C,MAAMQ,gBAAkB,QACtCG,EAAU,8BAA+B,WACzCI,SAAS1B,MAAQ,6BASjB,cAAC,EAAD,CAAO0C,MAAOA,IACd,qBAAK7C,UAAU,iBAAf,SAMM,cAACU,EAAD,CACEe,UAAWA,EACXT,QAAQ,8BACRf,KAAMA,UCtCLyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.d53f519e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?`dark`:`light`}`} >\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\">\r\n  Enable Dark Mode</label>\r\n</div>\r\n          \r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.ProtoTypes = { \r\ntitle: PropTypes.string.isRequired, \r\naboutText: PropTypes.string.isRequired }\r\n\r\nNavbar.defaultProps={\r\ntitle: 'Set title here',\r\naboutText: 'about text here'\r\n};","import React, { useState } from \"react\";\r\n\r\n//hooks help you utilise classes without creating one\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\")\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\")\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on Change\");\r\n    setText(event.target.value);\r\n    \r\n  };\r\n  //copy\r\n  const handleCopy = () => {\r\n    console.log(\"i am copy\");\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  };\r\n  //remove extra spaces\r\n  const handleExtraSpaces=()=>{\r\n    let newText= text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n  }\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  //use setText(\"new text\") to change the state\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange} \r\n            style={{backgroundColor: props.mode==='dark'?'black':'white', color:props.mode==='dark'?'white':'black'}}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n          Copy text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {text.split(\" \").length - 1} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1); //pehle char ko leke saare lelega\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      {/* {<Navbar title=\"TextUtils2\" aboutText=\"About TextUtils\"/>} */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* <Route path=\"/about\">\n            <About/>\n          </Route> */}\n          {/* <Route path=\"/\"> */}\n            <TextForm\n              showAlert={showAlert}\n              heading=\"Enter the text for analysis\"\n              mode={mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n        </div>\n        {/* </Router> */}\n        {/* <About/> */}\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n \n  <React.StrictMode> \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}